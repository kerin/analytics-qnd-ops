apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: {{.clusterDNSName}}
spec:
  additionalPolicies:
    node: |
      [
        {
          "Action": [
            "sts:AssumeRole"
          ],
          "Effect": "Allow",
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ecr:DescribeImages",
            "ecr:InitiateLayerUpload",
            "ecr:UploadLayerPart",
            "ecr:CompleteLayerUpload",
            "ecr:PutImage",
            "ecr:CreateRepository"
          ],
          "Resource": "*"
        }
      ]
  api:
    loadBalancer:
      type: Public
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  configBase: s3://{{.kopsStateBucket}}/{{.clusterDNSName}}
  dnsZone: {{.DNSZone}}
  etcdClusters:
  - name: main
    etcdMembers:
    {{- range .availabilityZones }}
      - instanceGroup: master-{{ . }}
        name: {{ substr (int (sub (len .) 1)) (int (len .)) . }}
    {{- end }}
  - name: events
    etcdMembers:
    {{- range .availabilityZones }}
      - instanceGroup: master-{{ . }}
        name: {{ substr (int (sub (len .) 1)) (int (len .)) . }}
    {{- end }}
  iam:
    legacy: true
  kubeAPIServer:
    oidcClientID: {{.OIDC.ClientID}}
    oidcGroupsClaim: https://api.{{.clusterDNSName}}/claims/groups
    oidcIssuerURL: {{.OIDC.IssuerURL}}
    oidcUsernameClaim: nickname
    runtimeConfig:
      batch/v2alpha1: "true"
  kubernetesApiAccess:
  - 0.0.0.0/0
  kubernetesVersion: 1.10.5
  masterInternalName: api.internal.{{.clusterDNSName}}
  masterPublicName: api.{{.clusterDNSName}}
  networkCIDR: {{.VPC.cidr}}
  networkID: {{.VPC.id}}
  networking:
    calico: {}
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
  - 0.0.0.0/0
  subnets:
  {{- range .VPC.publicSubnets }}
  - id: {{.id}}
    cidr: {{.cidr}}
    name: {{.availabilityZone}}
    zone: {{.availabilityZone}}
    type: Utility
  {{- end}}
  {{- range .VPC.privateSubnets }}
  - id: {{.id}}
    cidr: {{.cidr}}
    name: {{.availabilityZone}}
    zone: {{.availabilityZone}}
    type: Private
  {{- end}}
  topology:
    bastion:
      bastionPublicName: bastion.{{.clusterDNSName}}
    dns:
      type: Public
    masters: private
    nodes: private
